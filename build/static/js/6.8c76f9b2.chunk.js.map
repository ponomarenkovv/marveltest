{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBaundary/ErrorBaundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","messsage","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","name","getCharacter","id","getAllComics","_transformComics","getComic","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","View","imgStyle","className","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","state","CharInfo","charId","skeleton","CharSearchForm","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","ErrorBaundary","errorInfo","this","setState","children","Component","MainPage","selectedChar","Helmet","decoration"],"mappings":"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","file":"static/js/6.8c76f9b2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\n\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const  _apiKey = 'apikey=b3ee216559a7ba8028655e306d421abf';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n\n    // Вариант модификации готового метода для поиска по имени.\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\n\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\n\t//     return res.data.results.map(_transformCharacter);\n\t// }\n\n\t// Или можно создать отдельный метод для поиска по имени\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t};\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: \"There is no description for this character\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\treturn {\n\t\tloading,\n\t\terror,\n\t\tclearError,\n\t\tgetAllCharacters,\n\t\tgetCharacterByName,\n\t\tgetCharacter,\n\t\tgetAllComics,\n\t\tgetComic,\n\t};\n};\n\nexport default useMarvelService;    ","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            setLoading(false);\n            return data;\n\n        } catch(e) {\n            setLoading(false);\n            setError(e.messsage);\n            throw e;\n        }\n\n    }, [] );\n\n    const clearError = useCallback( () => setError(null), []);\n\n    return {loading, request, error, clearError}\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect ( () => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList (charList => [...charList, ...newCharList]);\n        setNewItemLoading (newItemLoading => false);\n        setOffset (offset => offset + 9);\n        setCharEnded (charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={()=> {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                        \n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading? <Spinner/> : null;\n   \n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect( () => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)  \n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);        \n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/>: null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>    \n    )\n} \n    \n\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt=\"{name}\" state={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        if (i > 9) return;\n                        return (\n                            <li key = {i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n\n            </ul>\n            \n\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={loading}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\n\nclass ErrorBaundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBaundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\nimport ErrorBaundary from \"../errorBaundary/ErrorBaundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                    />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBaundary>\n                <RandomChar/>\n            </ErrorBaundary>\n            <div className=\"char__content\">\n                <ErrorBaundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBaundary>\n                <div>\n                    <ErrorBaundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBaundary>\n                    <ErrorBaundary>\n                        <CharSearchForm/>\n                    </ErrorBaundary>\n                </div>\n                \n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;"],"sourceRoot":""}